{"version":3,"sources":["../../src/index.tsx","generateChips.tsx","App.tsx","index.tsx"],"names":["sizeToSpacing","sm","padding","fontSize","md","lg","DivWrapper","children","props","React","Chip","color","title","size","type","onClick","styles","text","filled","backgroundColor","outlined","boxShadow","filledOutlined","filledBold","useTypeToStyles","Wrapper","ButtonBase","style","display","borderRadius","ChipsView","chipsProps","spacing","container","justifyContent","item","key","index","alignItems","useFilterView","isConfig","config","defaultAllOn","defaultIdsOn","typeOn","typeOff","on","chipsData","data","useState","idsOn","setIdsOn","className","newOn","id","cloned","next","onChipClick","random","array","Math","floor","length","amount","sizes","types","colors","i","push","generate","App","FilterView","Typography","variant","Divider","margin","marginTop","join","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26f1ce22.chunk.js","sourcesContent":["import { ButtonBase, Grid, GridSpacing } from '@material-ui/core'\nimport React, { DispatchWithoutAction, FC, PropsWithChildren, useState } from 'react'\n\nexport type PropsOf<\n  TComponentOrTProps\n> = TComponentOrTProps extends React.ComponentType<infer TProps>\n  ? TProps\n  : TComponentOrTProps\n\nexport type Function<T, U> = (a: T) => U\nexport type Action1<T> = (a: T) => void\n\nexport type ChipSize = 'sm' | 'md' | 'lg'\nexport type ChipType =\n  | 'filled'\n  | 'outlined'\n  | 'filledOutlined'\n  | 'text'\n  | 'filledBold'\n\nconst useTypeToStyles: Function<\n  string,\n  Record<ChipType, React.CSSProperties>\n> = (color: string) => {\n  return {\n    text: { color: color },\n    filled: {\n      backgroundColor: `${color}26`,\n      color: color\n    },\n    outlined: {\n      boxShadow: `inset 0 0 0 1px ${color}`,\n      color: color\n    },\n    filledOutlined: {\n      backgroundColor: `${color}26`,\n      boxShadow: `inset 0 0 0 1px ${color}`,\n      color: color\n    },\n    filledBold: {\n      backgroundColor: color,\n      color: '#fff'\n    }\n  }\n}\n\nconst sizeToSpacing: Record<ChipSize, { padding: string; fontSize: number }> = {\n  sm: { padding: '0.25rem 0.75rem', fontSize: 12 },\n  md: { padding: '0.25rem 1rem', fontSize: 13 },\n  lg: { padding: '0.375rem 1.25rem', fontSize: 14 }\n}\n\nconst DivWrapper = ({ children, ...props }: PropsWithChildren<any>) => {\n  return <div {...props}>{children}</div>\n}\n\nexport const Chip = ({\n  color,\n  title,\n  size = 'md',\n  type = 'filled',\n  onClick\n}: {\n  color: string\n  title: string\n  size?: ChipSize\n  type?: ChipType\n  onClick?: DispatchWithoutAction\n}) => {\n  const styles = useTypeToStyles(color)\n  const Wrapper = onClick ? ButtonBase : DivWrapper\n  return (\n    <div style={{ display: 'flex' }}>\n      <Wrapper\n        style={{ ...styles[type], ...sizeToSpacing[size], borderRadius: 999 }}\n        onClick={onClick}\n      >\n        <span style={{}}>{title}</span>\n      </Wrapper>\n    </div>\n  )\n}\n\nexport const ChipsView = ({\n  chipsProps,\n  spacing = 2\n}: {\n  chipsProps: PropsOf<typeof Chip>[]\n  spacing?: GridSpacing\n}) => {\n  return (\n    <Grid container spacing={spacing} justifyContent='center'>\n      {chipsProps.map((props, index) => (\n        <Grid\n          item\n          key={index}\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center'\n          }}\n        >\n          <Chip {...props} />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nexport const useFilterView = <T,>(\n  chipsData: {\n    color: string\n    title: string\n    size: ChipSize\n    id: T\n  }[],\n  config?: {\n    defaultAllOn?: boolean\n    defaultIdsOn?: T[]\n    typeOn?: ChipType\n    typeOff?: ChipType\n    spacing?: GridSpacing\n  }\n) => {\n  const isConfig = config !== undefined\n  const defaultAllOn = (isConfig && config!.defaultAllOn) || false\n  const defaultIdsOn = (isConfig && config!.defaultIdsOn) || false\n  const typeOn = (isConfig && config!.typeOn) || 'filledBold'\n  const typeOff = (isConfig && config!.typeOff) || 'outlined'\n  const spacing = (isConfig && config!.spacing) || 1\n\n  let on: T[] = []\n  if (defaultIdsOn) {\n    on = defaultIdsOn\n  } else if (defaultAllOn) {\n    on = chipsData.map((data) => data.id)\n  }\n\n  const [idsOn, setIdsOn] = useState<T[]>(on)\n\n  const onChipClick = (id: T) => {\n    let cloned = [...idsOn]\n    const index = idsOn.indexOf(id)\n    if (index > -1) {\n      setIdsOn((prev) => {\n        const next = [...prev]\n        next.splice(index, 1)\n        return next\n      })\n      cloned.splice(index, 1)\n    } else {\n      setIdsOn((prev) => [...prev, id])\n      cloned.push(id)\n    }\n    return cloned\n  }\n\n  const FilterView = ({\n    onClick,\n    className = ''\n  }: {\n    onClick?: Action1<T[]>\n    className?: string\n  }) => {\n    return (\n      <Grid container spacing={spacing} className={className}>\n        {chipsData.map((data, index) => (\n          <Grid item key={index}>\n            <Chip\n              color={data.color}\n              title={data.title}\n              size={data.size}\n              type={idsOn.indexOf(data.id) > -1 ? typeOn : typeOff}\n              onClick={() => {\n                const newOn = onChipClick(data.id)\n                onClick?.(newOn)\n              }}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    )\n  }\n\n  return [idsOn, FilterView] as [\n    T[],\n    FC<{ onClick?: Action1<T[]>; className?: string }>\n  ]\n}\n","import { Chip, ChipSize, ChipType } from '../../dist'\nimport { PropsOf } from './App'\n\nconst random = (array: any[]) => {\n  return array[Math.floor(Math.random() * array.length)]\n}\n\nexport const generate: (amount: number) => PropsOf<typeof Chip>[] = (\n  amount: number\n) => {\n  const sizes: ChipSize[] = ['sm', 'md', 'lg']\n  const types: ChipType[] = [\n    'filled',\n    'outlined',\n    'filledOutlined',\n    'text',\n    'filledBold'\n  ]\n\n  const colors = ['#536dfe', '#38c979', '#ffbe51', '#ff5677', '#16cae6']\n\n  let props: PropsOf<typeof Chip>[] = []\n\n  for (let i = 0; i < amount; i++) {\n    const size = random(sizes)\n    const type = random(types)\n    const color = random(colors)\n    props.push({\n      title: 'Awesome',\n      size,\n      type,\n      color\n    })\n  }\n\n  return props\n}\n","import { Divider, Typography } from '@material-ui/core'\nimport React from 'react'\nimport { Chip, ChipsView, useFilterView } from 'react-awesome-chip'\n\nimport { generate } from './generateChips'\n\nimport 'react-awesome-chip/dist/index.css'\n\nexport type PropsOf<\n  TComponentOrTProps\n> = TComponentOrTProps extends React.ComponentType<infer TProps>\n  ? TProps\n  : TComponentOrTProps\n\nconst chipsProps: PropsOf<typeof Chip>[] = generate(66)\n\nconst App = () => {\n  const [idsOn, FilterView] = useFilterView(\n    [\n      { color: '#536dfe', title: 'Option 1', size: 'md', id: 1 },\n      { color: '#536dfe', title: 'Option 2', size: 'md', id: 2 },\n      { color: '#536dfe', title: 'Option 3', size: 'md', id: 3 },\n      { color: '#536dfe', title: 'Option 4', size: 'md', id: 4 }\n    ],\n    {\n      defaultIdsOn: [3]\n    }\n  )\n\n  return (\n    <div style={{ padding: 42 }}>\n      <Typography variant='h4'>Awesome Chips</Typography>\n      <Typography variant='subtitle1' color='textSecondary'>\n        Our stunning, super simple and configurable chips!\n      </Typography>\n      <Divider style={{ margin: '1rem 0' }} />\n      <ChipsView chipsProps={chipsProps} />\n      <Typography variant='h4' style={{ marginTop: '4rem' }}>\n        Filter View\n      </Typography>\n      <Typography variant='subtitle1' color='textSecondary'>\n        Use our awesome chips to create an amazing, simple and configurable\n        filter view.\n      </Typography>\n      <Divider style={{ margin: '1rem 0' }} />\n      <FilterView onClick={() => {}} />\n      <Typography\n        variant='subtitle1'\n        color='textSecondary'\n        style={{ margin: '1rem 0' }}\n      >\n        Chips picked: {idsOn.join(', ')}\n      </Typography>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}